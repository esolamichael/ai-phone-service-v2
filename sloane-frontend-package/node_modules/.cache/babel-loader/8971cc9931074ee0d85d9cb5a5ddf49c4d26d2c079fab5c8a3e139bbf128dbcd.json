{"ast":null,"code":"// src/contexts/AuthContext.jsx\nimport React,{createContext,useContext,useState,useEffect,useCallback}from'react';import authApi from'../api/auth';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export function useAuth(){return useContext(AuthContext);}export function AuthProvider(_ref){let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// Check if user is already logged in\nuseEffect(()=>{const token=localStorage.getItem('token');if(token){fetchCurrentUser();}else{setLoading(false);}},[]);// Fetch current user data\nconst fetchCurrentUser=async()=>{try{setLoading(true);const userData=await authApi.getCurrentUser();setCurrentUser({...userData,token:localStorage.getItem('token')});}catch(err){console.error('Failed to fetch current user:',err);localStorage.removeItem('token');localStorage.removeItem('refreshToken');}finally{setLoading(false);}};// Refresh token function\nconst refreshToken=useCallback(async()=>{try{// Call the refresh token API endpoint\nconst response=await authApi.refreshToken();// Update the tokens in localStorage\nlocalStorage.setItem('token',response.token);if(response.refreshToken){localStorage.setItem('refreshToken',response.refreshToken);}// Update the current user with the new token\nsetCurrentUser(prevUser=>({...prevUser,token:response.token}));return response.token;}catch(error){console.error('Error refreshing token:',error);// If refresh fails, log the user out\nlogout();throw error;}},[]);// Login function\nconst login=async(email,password)=>{setError(null);try{const response=await authApi.login(email,password);localStorage.setItem('token',response.token);if(response.refreshToken){localStorage.setItem('refreshToken',response.refreshToken);}setCurrentUser({...response.user,token:response.token});return response.user;}catch(err){setError(err.message||'Failed to login');throw err;}};// Signup function\nconst signup=async userData=>{setError(null);try{const response=await authApi.signup(userData);localStorage.setItem('token',response.token);if(response.refreshToken){localStorage.setItem('refreshToken',response.refreshToken);}setCurrentUser({...response.user,token:response.token});return response.user;}catch(err){setError(err.message||'Failed to sign up');throw err;}};// Logout function\nconst logout=async()=>{setError(null);try{await authApi.logout();}catch(err){console.error('Logout error:',err);}finally{localStorage.removeItem('token');localStorage.removeItem('refreshToken');setCurrentUser(null);}};// Forgot password function\nconst forgotPassword=async email=>{setError(null);try{return await authApi.forgotPassword(email);}catch(err){setError(err.message||'Failed to send password reset email');throw err;}};// Reset password function\nconst resetPassword=async(token,password)=>{setError(null);try{return await authApi.resetPassword(token,password);}catch(err){setError(err.message||'Failed to reset password');throw err;}};const value={currentUser,loading,error,login,signup,logout,forgotPassword,resetPassword,refreshToken};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});}export{AuthContext};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","authApi","jsx","_jsx","AuthContext","useAuth","AuthProvider","_ref","children","currentUser","setCurrentUser","loading","setLoading","error","setError","token","localStorage","getItem","fetchCurrentUser","userData","getCurrentUser","err","console","removeItem","refreshToken","response","setItem","prevUser","logout","login","email","password","user","message","signup","forgotPassword","resetPassword","value","Provider"],"sources":["/Users/Mike/Documents/ai-phone-service-codebase-v2/sloane-frontend-package/src/contexts/AuthContext.jsx"],"sourcesContent":["// src/contexts/AuthContext.jsx\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport authApi from '../api/auth';\n\nconst AuthContext = createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check if user is already logged in\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      fetchCurrentUser();\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  // Fetch current user data\n  const fetchCurrentUser = async () => {\n    try {\n      setLoading(true);\n      const userData = await authApi.getCurrentUser();\n      setCurrentUser({\n        ...userData,\n        token: localStorage.getItem('token')\n      });\n    } catch (err) {\n      console.error('Failed to fetch current user:', err);\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Refresh token function\n  const refreshToken = useCallback(async () => {\n    try {\n      // Call the refresh token API endpoint\n      const response = await authApi.refreshToken();\n      \n      // Update the tokens in localStorage\n      localStorage.setItem('token', response.token);\n      if (response.refreshToken) {\n        localStorage.setItem('refreshToken', response.refreshToken);\n      }\n      \n      // Update the current user with the new token\n      setCurrentUser(prevUser => ({\n        ...prevUser,\n        token: response.token,\n      }));\n\n      return response.token;\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      // If refresh fails, log the user out\n      logout();\n      throw error;\n    }\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    setError(null);\n    try {\n      const response = await authApi.login(email, password);\n      localStorage.setItem('token', response.token);\n      if (response.refreshToken) {\n        localStorage.setItem('refreshToken', response.refreshToken);\n      }\n      setCurrentUser({\n        ...response.user,\n        token: response.token\n      });\n      return response.user;\n    } catch (err) {\n      setError(err.message || 'Failed to login');\n      throw err;\n    }\n  };\n\n  // Signup function\n  const signup = async (userData) => {\n    setError(null);\n    try {\n      const response = await authApi.signup(userData);\n      localStorage.setItem('token', response.token);\n      if (response.refreshToken) {\n        localStorage.setItem('refreshToken', response.refreshToken);\n      }\n      setCurrentUser({\n        ...response.user,\n        token: response.token\n      });\n      return response.user;\n    } catch (err) {\n      setError(err.message || 'Failed to sign up');\n      throw err;\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    setError(null);\n    try {\n      await authApi.logout();\n    } catch (err) {\n      console.error('Logout error:', err);\n    } finally {\n      localStorage.removeItem('token');\n      localStorage.removeItem('refreshToken');\n      setCurrentUser(null);\n    }\n  };\n\n  // Forgot password function\n  const forgotPassword = async (email) => {\n    setError(null);\n    try {\n      return await authApi.forgotPassword(email);\n    } catch (err) {\n      setError(err.message || 'Failed to send password reset email');\n      throw err;\n    }\n  };\n\n  // Reset password function\n  const resetPassword = async (token, password) => {\n    setError(null);\n    try {\n      return await authApi.resetPassword(token, password);\n    } catch (err) {\n      setError(err.message || 'Failed to reset password');\n      throw err;\n    }\n  };\n\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    signup,\n    logout,\n    forgotPassword,\n    resetPassword,\n    refreshToken\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport { AuthContext };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}