{"ast":null,"code":"// src/api/auth.js\nimport api from'./index';const authApi={// Login user\nlogin:async(email,password)=>{try{const response=await api.post('/auth/login',{email,password});return response.data;}catch(error){throw error;}},// Register new user\nsignup:async userData=>{console.log('Signup API call with data:',userData);// Check if we should use mock response (if real API is down)\nconst useMockResponse=true;// Set to false if you want to use the real API\nif(useMockResponse){console.log('Using mock signup response');// Return a mock successful response\nreturn new Promise(resolve=>{// Simulate network delay\nsetTimeout(()=>{const mockResponse={user:{id:'mock-user-id',firstName:userData.firstName,lastName:userData.lastName,email:userData.email,businessName:userData.businessName},token:'mock-jwt-token-'+Math.random().toString(36).substring(2),refreshToken:'mock-refresh-token-'+Math.random().toString(36).substring(2)};console.log('Mock signup response:',mockResponse);resolve(mockResponse);},800);// simulate network delay\n});}// Original implementation for when the API is working\ntry{const response=await api.post('/auth/register',userData);console.log('Signup API response:',response.data);return response.data;}catch(error){console.error('Signup API error:',error);throw error;}},// Logout user\nlogout:async()=>{try{await api.post('/auth/logout');return true;}catch(error){throw error;}},// Get current user data\ngetCurrentUser:async()=>{try{const response=await api.get('/auth/me');return response.data;}catch(error){throw error;}},// Send password reset email\nforgotPassword:async email=>{try{const response=await api.post('/auth/forgot-password',{email});return response.data;}catch(error){throw error;}},// Reset password with token\nresetPassword:async(token,password)=>{try{const response=await api.post('/auth/reset-password',{token,password});return response.data;}catch(error){throw error;}},// Refresh token\nrefreshToken:async()=>{try{const refreshToken=localStorage.getItem('refreshToken');const response=await api.post('/auth/refresh-token',{refreshToken});return response.data;}catch(error){throw error;}},// Verify email with token\nverifyEmail:async token=>{try{const response=await api.post('/auth/verify-email',{token});return response.data;}catch(error){throw error;}}};export default authApi;","map":{"version":3,"names":["api","authApi","login","email","password","response","post","data","error","signup","userData","console","log","useMockResponse","Promise","resolve","setTimeout","mockResponse","user","id","firstName","lastName","businessName","token","Math","random","toString","substring","refreshToken","logout","getCurrentUser","get","forgotPassword","resetPassword","localStorage","getItem","verifyEmail"],"sources":["/Users/Mike/Documents/ai-phone-service-codebase-v2/sloane-frontend-package/src/api/auth.js"],"sourcesContent":["// src/api/auth.js\nimport api from './index';\n\nconst authApi = {\n  // Login user\n  login: async (email, password) => {\n    try {\n      const response = await api.post('/auth/login', { email, password });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Register new user\n  signup: async (userData) => {\n    console.log('Signup API call with data:', userData);\n    \n    // Check if we should use mock response (if real API is down)\n    const useMockResponse = true; // Set to false if you want to use the real API\n    \n    if (useMockResponse) {\n      console.log('Using mock signup response');\n      // Return a mock successful response\n      return new Promise((resolve) => {\n        // Simulate network delay\n        setTimeout(() => {\n          const mockResponse = {\n            user: {\n              id: 'mock-user-id',\n              firstName: userData.firstName,\n              lastName: userData.lastName,\n              email: userData.email,\n              businessName: userData.businessName\n            },\n            token: 'mock-jwt-token-' + Math.random().toString(36).substring(2),\n            refreshToken: 'mock-refresh-token-' + Math.random().toString(36).substring(2)\n          };\n          console.log('Mock signup response:', mockResponse);\n          resolve(mockResponse);\n        }, 800); // simulate network delay\n      });\n    }\n    \n    // Original implementation for when the API is working\n    try {\n      const response = await api.post('/auth/register', userData);\n      console.log('Signup API response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Signup API error:', error);\n      throw error;\n    }\n  },\n\n  // Logout user\n  logout: async () => {\n    try {\n      await api.post('/auth/logout');\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Get current user data\n  getCurrentUser: async () => {\n    try {\n      const response = await api.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Send password reset email\n  forgotPassword: async (email) => {\n    try {\n      const response = await api.post('/auth/forgot-password', { email });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Reset password with token\n  resetPassword: async (token, password) => {\n    try {\n      const response = await api.post('/auth/reset-password', { token, password });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n  \n  // Refresh token\n  refreshToken: async () => {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      const response = await api.post('/auth/refresh-token', { refreshToken });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Verify email with token\n  verifyEmail: async (token) => {\n    try {\n      const response = await api.post('/auth/verify-email', { token });\n      return response.data;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\nexport default authApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}